import disnake
from disnake.ext import commands
from disnake import TextInputStyle
from yoomoney import Client, Quickpay
from utils.config import yoomoney_token, yoomoney_shet, adminlist, logid, roleid, guildid, iconurl, supporturl
import sqlite3
import random
import os
import asyncio

UPLOAD_DIR = "shop_files"

client = Client(yoomoney_token)

db = sqlite3.connect("dbs/shopdb.db")
cursor = db.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS shop (id INT, name TEXT, description TEXT, author TEXT, price INT, tovar TEXT, status INT)")
cursor.execute("CREATE TABLE IF NOT EXISTS users (id BIGINT, shopping INT, balance INT, buy_shop_id TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS payments (userid BIGINT, checkid VARCHAR, money INT)")
cursor.execute("CREATE TABLE IF NOT EXISTS promocode (pc TEXT, value INT, count INT, userid BIGINT)")
cursor.execute("CREATE TABLE IF NOT EXISTS buyres (tovar TEXT, user_id BIGINT)")

class ShopSystem(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command()
    async def start(self, inter):
        if inter.author.id not in adminlist:
            embed = disnake.Embed(title='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', color=disnake.Color.from_rgb(47,49,54))
            embed.set_thumbnail(url=inter.author.avatar) #–¢—É—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å
            await inter.send(embed=embed, components=[
                disnake.ui.Button(label="–ú–∞–≥–∞–∑–∏–Ω", style=disnake.ButtonStyle.success, custom_id="shop", emoji='üõçÔ∏è'),
                disnake.ui.Button(label="–ü—Ä–æ—Ñ–∏–ª—å", style=disnake.ButtonStyle.blurple, custom_id="lk", emoji='üë•'),
                [disnake.ui.Button(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", style=disnake.ButtonStyle.primary, emoji='üí§', url=supporturl)]
            ])
        else:
            embed = disnake.Embed(title='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', description='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', color=disnake.Color.from_rgb(47,49,54))
            embed.set_thumbnail(url=inter.author.avatar) #–¢—É—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å
            await inter.send(embed=embed, components=[
                disnake.ui.Button(label="–ú–∞–≥–∞–∑–∏–Ω", style=disnake.ButtonStyle.success, custom_id="shop", emoji='üõçÔ∏è'),
                disnake.ui.Button(label="–ü—Ä–æ—Ñ–∏–ª—å", style=disnake.ButtonStyle.blurple, custom_id="lk", emoji='üë•'),
                [disnake.ui.Button(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", style=disnake.ButtonStyle.primary, emoji='üí§', url=supporturl),
                disnake.ui.Button(label="–ê–¥–º–∏–Ω", style=disnake.ButtonStyle.gray, custom_id="adminpanel", emoji='üêñ')]
            ])

    @commands.command()
    async def ashop(self, inter):
        if inter.author.id not in adminlist:
            embedfaq = disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π, –º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫!',
                                     color=disnake.Color.from_rgb(255, 0, 0))
            await inter.send(embed=embedfaq)
        else:
            prods = cursor.execute("SELECT id, name, price FROM shop WHERE status = 0").fetchall()
            embed = disnake.Embed(title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–∞–≥–∞–∑–∏–Ω–æ–º', description='–¢–æ–≤–∞—Ä—ã/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ',
                                  color=disnake.Color.from_rgb(47, 49, 54))
            for prod in prods:
                embed.add_field(name=prod[1], value=f'–¶–µ–Ω–∞: {prod[2]}‚ÇΩ | ID: {prod[0]}', inline=False)
            await inter.send(embed=embed, components=[
                disnake.ui.Button(label="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", style=disnake.ButtonStyle.success,
                                  custom_id="sadd"),
                disnake.ui.Button(label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", style=disnake.ButtonStyle.danger,
                                  custom_id="sremove"),
                [disnake.ui.Button(label="–£–¥–∞–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", style=disnake.ButtonStyle.success,
                                  custom_id="delbal"),
                disnake.ui.Button(label="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", style=disnake.ButtonStyle.success,
                                  custom_id="baddpc")],
                disnake.ui.Button(label="–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", style=disnake.ButtonStyle.secondary,
                                  custom_id="setbal")
            ])

    @commands.Cog.listener()
    async def on_dropdown(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id == 'buy_dropdown':
            tovar = cursor.execute("SELECT id, price, tovar FROM shop WHERE name =? AND status = 0",
                                   (inter.values[0],)).fetchone()
            user = cursor.execute("SELECT balance, shopping, buy_shop_id FROM users WHERE id =?",
                                  (inter.author.id,)).fetchone()

            user_purchases = cursor.execute("SELECT buy_shop_id FROM users WHERE id =?", (inter.author.id,)).fetchone()
            if user_purchases and str(tovar[0]) in user_purchases[0].split(", "):
                return await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!',
                                        description='–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ.\n–ï—Å–ª–∏, –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º,\n/start > –ü—Ä–æ—Ñ–∏–ª—å > –°–∫–∞—á–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.',
                                        color=disnake.Color.from_rgb(255, 0, 0)),
                    ephemeral=True
                )

            if not tovar:
                return await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!',
                                        description='–¢–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω,\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É –∑–∞ —Ç–æ–≤–∞—Ä–æ–º',
                                        color=disnake.Color.from_rgb(255, 0, 0)),
                    ephemeral=True
                )
            if not user:
                cursor.execute("INSERT INTO users (id, shopping, balance, buy_shop_id) VALUES (?, 0, 0,'')",
                               (inter.author.id,))
                db.commit()
                return await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!',
                                        description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.',
                                        color=disnake.Color.from_rgb(255, 0, 0)),
                    ephemeral=True
                )
            balance, shopping, buy_shop_id = user
            if balance < tovar[1]:
                return await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!',
                                        description='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ,\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç.',
                                        color=disnake.Color.from_rgb(255, 0, 0)),
                    ephemeral=True
                )
            embed = disnake.Embed(title='–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?',
                                  description=f'{inter.values[0]} –∑–∞ {tovar[1]}‚ÇΩ \n–£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ!',
                                  color=disnake.Color.from_rgb(47, 49, 54))
            embed.set_footer(
                text='–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ FAQ & –û—Ñ–µ—Ä—Ç—É, –ø–µ—Ä–µ–¥ —Ç–µ–º —á–µ–º –ø–æ–∫—É–ø–∞—Ç—å! \n–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏')

            await inter.response.send_message(embed=embed, components=[
                disnake.ui.Button(label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style=disnake.ButtonStyle.success, custom_id='accept', emoji='‚úÖ')
            ], ephemeral=True)
            try:
                """cursor.execute("UPDATE shop SET status = 1 WHERE id =?", (tovar[0],))
                                                                db.commit()"""
                interb = await self.bot.wait_for('button_click', timeout=60)
                balance -= tovar[1]
                shopping += 1
                if buy_shop_id:
                    buy_shop_id += f", {tovar[0]}"
                else:
                    buy_shop_id = str(tovar[0])
                cursor.execute("UPDATE users SET balance =?, shopping =?, buy_shop_id =? WHERE id =?",
                               (balance, shopping, buy_shop_id, inter.author.id))
                db.commit()

                tovar_content = tovar[2]

                if os.path.exists(os.path.join(UPLOAD_DIR, tovar_content)):
                    file_path = os.path.join(UPLOAD_DIR, tovar_content)
                    await interb.send(file=disnake.File(file_path), ephemeral=True)
                else:
                    # Assume 'tovar' is the actual content (text)
                    await interb.send(content=tovar_content, ephemeral=True)

                log_channel = await self.bot.fetch_channel(logid)
                await log_channel.send(embed=disnake.Embed(title="–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
                                                           description=f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <@{inter.author.id}> \n–¢–æ–≤–∞—Ä: {inter.values[0]}",
                                                           color=disnake.Color.from_rgb(47, 49, 54)))
                guild = await self.bot.fetch_guild(guildid)
                role = guild.get_role(roleid)
                await inter.author.add_roles(role)

            except Exception as e:
                cursor.execute("UPDATE shop SET status = 0 WHERE id =?", (tovar[0],))
                db.commit()
                print(f"–û—à–∏–±–∫–∞: {e}")

        if inter.component.custom_id == "download_select":
            selected_tovar_id = inter.values[0]
            tovar_info = cursor.execute(f"SELECT tovar FROM shop WHERE id = {selected_tovar_id}").fetchone()
            if tovar_info:
                tovar_content = tovar_info[0]
                if os.path.exists(os.path.join(UPLOAD_DIR, tovar_content)):
                    file_path = os.path.join(UPLOAD_DIR, tovar_content)
                    await inter.response.send_message(file=disnake.File(file_path), ephemeral=True)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await inter.response.send_message(content=tovar_content, ephemeral=True)
            else:
                await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.',
                                        color=disnake.Color.from_rgb(255, 0, 0)), ephemeral=True)
    @commands.Cog.listener("on_button_click")
    async def menu_listener(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id == "shop":
            try:
                prods = cursor.execute("SELECT id, name, description, author, price FROM shop WHERE status = 0").fetchall()
                embed = disnake.Embed(title='–ú–∞–≥–∞–∑–∏–Ω', description='–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', color=disnake.Color.from_rgb(47,49,54))
                names = []
                for prod in prods:
                    names.append(prod[1])
                dev = []
                options = []
                for prod in prods:
                    if names.count(f"{prod[1]}") > 1:
                        embed.add_field(name=prod[1], value=f'> –û–ø–∏—Å–∞–Ω–∏–µ: `{prod[2]}`\n> –¶–µ–Ω–∞: `{prod[4]}`‚ÇΩ | –ö–æ–ª-–≤–æ: `–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ`\n> –ê–≤—Ç–æ—Ä: `{prod[3]}`', inline=False)
                        options.append(disnake.SelectOption(
                            label=prod[1], description=f"–¶–µ–Ω–∞: {prod[4]}‚ÇΩ | –ö–æ–ª-–≤–æ: `–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ`", emoji='üõí'))
                        for i in range(names.count(f"{prod[1]}")):
                            names.remove(prod[1])
                        dev.append(prod[1])
                    else:
                        if prod[1] in dev:
                            pass
                        else:
                            embed.add_field(name=prod[1], value=f'\n> –û–ø–∏—Å–∞–Ω–∏–µ: `{prod[2]}`\n> –¶–µ–Ω–∞: `{prod[4]}`‚ÇΩ | –ö–æ–ª-–≤–æ: `–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ`\n> \n> –ê–≤—Ç–æ—Ä: `{prod[3]}`', inline=False)
                            options.append(disnake.SelectOption(
                            label=prod[1], description=f"–¶–µ–Ω–∞: {prod[4]}‚ÇΩ | –ö–æ–ª-–≤–æ: 1", emoji='üõí'))
                await inter.response.send_message(embed=embed, ephemeral=True, components=[disnake.ui.Select(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', min_values=1, max_values=1, options=options, custom_id='buy_dropdown')])
            except:
              await inter.response.send_message(embed=embed, ephemeral=True)

        if inter.component.custom_id == 'baddpc':
            await inter.response.send_modal(title='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', custom_id='addpc', components=[
                disnake.ui.TextInput(
                    label="–ü—Ä–æ–º–æ–∫–æ–¥",
                    placeholder="PROMOCODE",
                    custom_id="pc",
                    style=TextInputStyle.short
                ),
                disnake.ui.TextInput(
                    label="–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
                    placeholder="000",
                    custom_id="pcval",
                    style=TextInputStyle.short
                ),
                disnake.ui.TextInput(
                    label="–ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
                    placeholder="10",
                    custom_id="pcount",
                    style=TextInputStyle.short
                )
            ])
        if inter.component.custom_id == "addbal":
            await inter.response.send_modal(title='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', custom_id='gencheck', components=[
                disnake.ui.TextInput(
                    label="–°—É–º–º–∞",
                    placeholder="–¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!",
                    required=True,
                    custom_id="summa",
                    style=TextInputStyle.short
                ),
                disnake.ui.TextInput(
                    label="–ü—Ä–æ–º–æ–∫–æ–¥",
                    placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
                    custom_id="promocode",
                    required=False,
                    style=TextInputStyle.short
                )
            ])
        if inter.component.custom_id == "sadd":
            await inter.response.send_modal(title='–î–æ–±–∞–≤–∏—Ç—å –¢–æ–≤–∞—Ä', custom_id='addprod', components=[
                disnake.ui.TextInput(
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ",
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                    custom_id="name",
                    style=TextInputStyle.short,
                ),
                disnake.ui.TextInput(
                    label="–û–ø–∏—Å–∞–Ω–∏–µ",
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                    custom_id="description",
                    style=TextInputStyle.paragraph,
                ),
                disnake.ui.TextInput(
                    label="–ê–≤—Ç–æ—Ä",
                    placeholder="–ê–≤—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞",
                    custom_id="author",
                    style=TextInputStyle.short,
                ),
                disnake.ui.TextInput(
                    label="–¶–µ–Ω–∞",
                    placeholder="–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
                    custom_id="price",
                    style=TextInputStyle.short,
                )
            ])
        if inter.component.custom_id == "sremove":
            await inter.response.send_modal(title='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', custom_id='removeprod', components=[
                disnake.ui.TextInput(
                    label="ID",
                    placeholder="ID –¢–æ–≤–∞—Ä–∞",
                    custom_id="id",
                    style=TextInputStyle.short,
                )
            ])

        if inter.component.custom_id == "setbal":
            await inter.response.send_modal(title="–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", custom_id="msetbal", components=[
                disnake.ui.TextInput(
                    label="–ê–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    placeholder="000000000000000",
                    custom_id="userid",
                    style=TextInputStyle.short,
                ),
                disnake.ui.TextInput(
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥",
                    placeholder="00000",
                    custom_id="amount",
                    style=TextInputStyle.short,
                )
            ])

        if inter.component.custom_id == "delbal":
            await inter.response.send_modal(title="–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", custom_id="mdelbal", components=[
                disnake.ui.TextInput(
                    label="–ê–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    placeholder="000000000000000",
                    custom_id="userid",
                    style=TextInputStyle.short,
                )
            ])

        if inter.component.custom_id == 'oferta':
            embedoferta = disnake.Embed(title='–û—Ñ–µ—Ä—Ç–∞', description='.',
                                        color=disnake.Color.from_rgb(47, 49, 54))
            await inter.response.send_message(embed=embedoferta, ephemeral=True)

        if inter.component.custom_id == 'more':
            embedfaq = disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!',
                                     color=disnake.Color.from_rgb(255, 0, 0))
            await inter.response.send_message(embed=embedfaq, ephemeral=True)

        if inter.component.custom_id == 'adminpanel':
            if inter.author.id not in adminlist:
                embedfaq = disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–ò–¥–∏—Ç–µ –Ω–∞—Ö—É–π, –º–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫!',
                                         color=disnake.Color.from_rgb(255, 0, 0))
                await inter.response.send_message(embed=embedfaq, ephemeral=True)
            else:
                prods = cursor.execute("SELECT id, name, price FROM shop WHERE status = 0").fetchall()
                embed = disnake.Embed(title='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ú–∞–≥–∞–∑–∏–Ω–æ–º', description='–¢–æ–≤–∞—Ä—ã/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ',
                                      color=disnake.Color.from_rgb(47, 49, 54))
                for prod in prods:
                    embed.add_field(name=prod[1], value=f'–¶–µ–Ω–∞: {prod[2]}‚ÇΩ | ID: {prod[0]}', inline=False)
                await inter.send(embed=embed, ephemeral=True, components=[
                    disnake.ui.Button(label="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", style=disnake.ButtonStyle.success,
                                      custom_id="sadd"),
                    disnake.ui.Button(label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", style=disnake.ButtonStyle.danger,
                                      custom_id="sremove"),
                    disnake.ui.Button(label="–£–¥–∞–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", style=disnake.ButtonStyle.success,
                                      custom_id="delbal"),
                    disnake.ui.Button(label="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", style=disnake.ButtonStyle.success,
                                      custom_id="baddpc"),
                    disnake.ui.Button(label="–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", style=disnake.ButtonStyle.secondary,
                                      custom_id="setbal")
                ])

        if inter.component.custom_id == 'lk':
            user = cursor.execute(
                f"SELECT shopping, balance, buy_shop_id FROM users WHERE id = {inter.author.id}").fetchone()
            if not user:
                cursor.execute(
                    f"INSERT INTO users (id, shopping, balance, buy_shop_id) VALUES ({inter.author.id}, 0, 0, '')")
                db.commit()
                user = cursor.execute(
                    f"SELECT shopping, balance, buy_shop_id FROM users WHERE id = {inter.author.id}").fetchone()

            embed = disnake.Embed(title=f'–ü—Ä–æ—Ñ–∏–ª—å - {inter.author}',
                                  description=f'\n **–ë–∞–ª–∞–Ω—Å: {user[1]}‚ÇΩ** \n**–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {user[0]}**\n\n> `üíµ` - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n> `üõí` - –°–∫–∞—á–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å\n\n**–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**',
                                  color=disnake.Color.from_rgb(47, 49, 54))
            embed.set_thumbnail(url=inter.author.avatar.url)

            buy_shop_id = user[2]
            if buy_shop_id:
                buy_shop_id = buy_shop_id.split(', ')
                for id in buy_shop_id:
                    tovar = cursor.execute(f"SELECT name FROM shop WHERE id = {id}").fetchone()
                    if tovar:
                        embed.add_field(name=tovar[0], value=f'ID: {id}', inline=False)
                    else:
                        embed.add_field(name='–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', value=f'ID: {id}', inline=False)
            else:
                embed.add_field(name='–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                                value='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å" —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ç–æ–≤–∞—Ä', inline=False)

            await inter.response.send_message(embed=embed, ephemeral=True, components=[
                disnake.ui.Button(label="üíµ", style=disnake.ButtonStyle.success, custom_id="addbal"),
                disnake.ui.Button(label="üõí", style=disnake.ButtonStyle.success, custom_id="downloadtovar")
            ])

        if inter.component.custom_id == 'downloadtovar':
            user_id = inter.author.id
            buy_shop_id = cursor.execute(f"SELECT buy_shop_id FROM users WHERE id = {user_id}").fetchone()[0]
            if buy_shop_id:
                buy_shop_id = buy_shop_id.split(', ')
                options = []
                for id in buy_shop_id:
                    tovar = cursor.execute(f"SELECT name FROM shop WHERE id = {id}").fetchone()
                    if tovar:
                        options.append(
                            disnake.SelectOption(label=tovar[0], description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å", value=id))
                if options:
                    embed = disnake.Embed(title='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:',
                                          description='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.',
                                          color=disnake.Color.from_rgb(47, 49, 54))
                    await inter.response.send_message(embed=embed, ephemeral=True, components=[
                        disnake.ui.Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", min_values=1, max_values=1, options=options,
                                          custom_id="download_select")
                    ])
                else:
                    await inter.response.send_message(
                        embed=disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.',
                                            color=disnake.Color.from_rgb(255, 0, 0)), ephemeral=True)
            else:
                await inter.response.send_message(
                    embed=disnake.Embed(title='–û—à–∏–±–∫–∞!', description='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.',
                                        color=disnake.Color.from_rgb(255, 0, 0)), ephemeral=True)

    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        if inter.custom_id == "addpc":
            cursor.execute(
                f"INSERT INTO promocode (pc, value, count, userid) VALUES ('{inter.text_values['pc']}', {inter.text_values['pcval']}, {inter.text_values['pcount']}, {inter.author.id})")
            db.commit()
            await inter.response.send_message(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {inter.text_values['pc']}")

        if inter.custom_id == "addprod":
            await inter.response.defer(ephemeral=True)

            def check(m):
                return m.author == inter.author and (len(m.attachments) > 0 or m.content)

            try:
                await inter.followup.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–∏–ª–∏ —Ç–µ–∫—Å—Ç) –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", ephemeral=True)
                msg = await self.bot.wait_for('message', check=check, timeout=60)

                file_name = None
                if msg.attachments:
                    attachment = msg.attachments[0]
                    random_name = f"{random.randint(0, 999999)}{os.path.splitext(attachment.filename)[1]}"
                    file_path = os.path.join(UPLOAD_DIR, random_name)
                    await attachment.save(file_path)
                    file_name = random_name
                else:
                    file_name = msg.content

                cursor.execute(
                    "INSERT INTO shop (id, name, description, author, price, tovar, status) VALUES (?, ?, ?, ?, ?, ?, 0)",
                    (random.randint(0, 999999), inter.text_values['name'], inter.text_values['description'],
                     inter.text_values['author'], inter.text_values['price'], file_name))
                db.commit()

                await inter.followup.send(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {inter.text_values['name']}", ephemeral=True)

            except Exception as e:
                await inter.followup.send(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –û—à–∏–±–∫–∞: {e}", ephemeral=True)

        if inter.custom_id == "removeprod":
            cursor.execute(f"DELETE FROM shop WHERE id = {inter.text_values['id']}")
            db.commit()
            await inter.response.send_message("–£–¥–∞–ª–µ–Ω–æ", ephemeral=True)

        if inter.custom_id == "msetbal":
            try:
                bal = cursor.execute(
                    f"SELECT balance FROM users WHERE id = {int(inter.text_values['userid'])}").fetchone()
                fullbal = int(bal[0]) + int(inter.text_values['amount'])
                cursor.execute(f"UPDATE users SET balance = {fullbal} WHERE id = {inter.text_values['userid']}")
                await inter.response.send_message(
                    f"–í—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@{inter.text_values['userid']}> {inter.text_values['amount']}‚ÇΩ")
                log_channel = await self.bot.fetch_channel(logid)
                embed = disnake.Embed(title="–í—ã–¥–∞–Ω –±–∞–ª–∞–Ω—Å",
                                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@{inter.text_values['userid']}> \n–°—É–º–º–∞: {inter.text_values['amount']}‚ÇΩ \n –ê–¥–º–∏–Ω: {inter.author.mention}",
                                      color=disnake.Color.from_rgb(47, 49, 54))
                await log_channel.send(embed=embed)
            except:
                await inter.response.send_message(
                    f"–ü–æ—Ö–æ–∂–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞.")

        if inter.custom_id == "mdelbal":
            try:
                cursor.execute(f"UPDATE users SET balance = 0 WHERE id = {inter.text_values['userid']}")
                await inter.response.send_message(
                    f"–£–¥–∞–ª–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@{inter.text_values['userid']}>")
                log_channel = await self.bot.fetch_channel(logid)
                embed = disnake.Embed(title="–û—á–∏—Å—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞",
                                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@{inter.text_values['userid']}>\n –ê–¥–º–∏–Ω: {inter.author.mention}",
                                      color=disnake.Color.from_rgb(47, 49, 54))
                await log_channel.send(embed=embed)
            except:
                await inter.response.send_message(
                    f"–ü–æ—Ö–æ–∂–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞.")

        if inter.custom_id == "gencheck":
            try:
                summa = int(inter.text_values['summa'])
                summaop = summa

                if summaop < 5 or summaop > 15000:
                    await inter.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 15000 —Ä—É–±–ª–µ–π!", ephemeral=True)
                    return

                if inter.text_values['promocode']:
                    pc = cursor.execute(
                        f"SELECT value, count FROM promocode WHERE pc = '{inter.text_values['promocode']}'").fetchone()
                    if pc and pc[1] >= 1:
                        bonus = summa * pc[0] / 100
                        summa = int(round(summa + bonus))
                        pcount = pc[1] - 1
                        if pcount <= 0:
                            cursor.execute(f"DELETE FROM promocode WHERE pc = '{inter.text_values['promocode']}'")
                            db.commit()
                        else:
                            cursor.execute(
                                f"UPDATE promocode SET count = {pcount} WHERE pc = '{inter.text_values['promocode']}'")
                            db.commit()

                payment = Quickpay(
                    receiver=yoomoney_shet,
                    quickpay_form="shop",
                    targets=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {inter.author.id}",
                    paymentType="SB",
                    sum=summaop,
                    label=str(random.randint(1, 999999))
                )
                url = payment.redirected_url
                cursor.execute(
                    f"INSERT INTO payments (userid, checkid, money) VALUES ({inter.author.id}, '{payment.label}', {summa})")
                db.commit()

                embed = disnake.Embed(title='–û–ø–ª–∞—Ç–∞ —Å—á—ë—Ç–∞',
                                      description=f'**–û–ø–ª–∞—Ç–∏—Ç–µ:** {summaop}‚ÇΩ \n **–ü–æ–ª—É—á–∏—Ç–µ:** {summa}‚ÇΩ',
                                      color=disnake.Color.from_rgb(47, 49, 54))
                embed.set_footer(
                    text="–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –≤—Ä–µ–º—è.\n–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏ —Å–ø—É—Å—Ç—è —á–∞—Å –∏–ª–∏ –±–æ–ª—å—à–µ,\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                await inter.response.send_message(embed=embed, ephemeral=True, components=[
                    disnake.ui.Button(label='–û–ø–ª–∞—Ç–∏—Ç—å', style=disnake.ButtonStyle.success, url=url)
                ])
            except ValueError:
                await inter.response.send_message("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª–µ —Å—É–º–º—ã!")

async def checkoplata(bot, client):
    while True:
        await asyncio.sleep(10)
        oplats = cursor.execute("SELECT userid, checkid, money FROM payments").fetchall()
        for oplata in oplats:
            try:
                history = client.operation_history(label=oplata[1])
                if history.operations:
                    if history.operations[0].status == "success":
                        user = cursor.execute(f"SELECT balance FROM users WHERE id = {oplata[0]}").fetchone()
                        newbal = int(user[0]) + int(oplata[2])
                        cursor.execute(f"UPDATE users SET balance = {newbal} WHERE id = {oplata[0]}")
                        cursor.execute(f"DELETE FROM payments WHERE checkid = '{oplata[1]}'")
                        db.commit()
                        print(f"–ü–ª–∞—Ç—ë–∂: {oplata[1]} –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –£–¥–∞–ª—è—é —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                        log_channel = await bot.fetch_channel(logid)
                        member = await bot.fetch_user(int(oplata[0]))
                        await member.send(f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {oplata[2]}‚ÇΩ!")
                        embed = disnake.Embed(
                            title="–ü–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å",
                            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <@{oplata[0]}> \n–°—É–º–º–∞: {oplata[2]}",
                            color=disnake.Color.from_rgb(47, 49, 54)
                        )
                        await log_channel.send(embed=embed)

                    elif history.operations[0].status == "refused":
                        cursor.execute(f"DELETE FROM payments WHERE checkid = '{oplata[1]}'")
                        db.commit()
                        embedopp = disnake.Embed(
                            title="–û—à–∏–±–∫–∞",
                            description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ \n–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞.",
                            color=disnake.Color.from_rgb(47, 49, 54)
                        )
                        embedopp.set_footer(
                            text='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤–∞–º —Ö–≤–∞—Ç–∏—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞, –ª–∏–±–æ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
                        await member.send(embed=embedopp)
            except Exception as e:
                member = await bot.fetch_user(int(oplata[0]))
                await member.send(
                    f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞, –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–æ–µ–¥–µ–Ω–µ–Ω–∏–µ —Å YooMoneyAPI, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {oplata[1]}: {e}")
                return

def setup(bot: commands.Bot):
    bot.add_cog(ShopSystem(bot))
    bot.loop.create_task(checkoplata(bot, client))
